name: Assign api reviewer to api review request issue.

# This workflow is used to assign a member of api-review-team to issues
# labeled with 'api-approved' label.

permissions:
  pull-requests: write
  issues: write

on:
  issues:
    types: [labeled]

jobs:
  assign-api-reviewer:
    runs-on: [ubuntu-latest]
    steps:
        - name: App Token
          uses: actions/create-github-app-token@v1
          id: app-token
          with:
            # API_REVIEWER_ASSIGNER_APP_KEY secret and API_REVIEWER_ASSIGNER_APP_ID variable
            # should be defined at organization level with the private key of the associated github app and its id, respectively. For more details see
            # https://devopsjournal.io/blog/2022/01/03/GitHub-Tokens
            app_id: ${{ vars.API_REVIEWER_ASSIGNER_APP_ID }}
            private_key: ${{ secrets.API_REVIEWER_ASSIGNER_APP_KEY }}
        - name: Assign random api rewiewer to request
          uses: actions/github-script@v6
          with:
                github-token: ${{ steps.app-token.outputs.token }}
                script: |
                  // --------------------------------------------------------------------------------------------------------------------------------
                  //                                                       Constants
                  // --------------------------------------------------------------------------------------------------------------------------------                    
                  const TeamName = "api-review-team";
                  const ApiApprovedLabel = "api-approved";

                  const owner = context.repo.owner;
                  const repo = context.repo.repo;
                  const number = context.payload.issue.number;
                  const assignees = context.payload.issue.assignees;

                  // --------------------------------------------------------------------------------------------------------------------------------
                  //                                                      Entry point
                  // --------------------------------------------------------------------------------------------------------------------------------                    
                  if (context.payload.issue.labels.findIndex(label => label.name === ApiApprovedLabel) === -1) {
                    core.notice(`Issue ${number} does not contain label ${ApiApprovedLabel}; ignoring...`);
                    return;
                  }

                  const parameters = {
                    organization: context.payload.organization.login,
                    teamToCheck: TeamName
                  };
                      
                  const query = `
                          query($organization: String!, $teamToCheck: String!) {
                            organization(login: $organization) { team(slug: $teamToCheck) { members { nodes { login } } } }
                          }`;
  
                  const teamMembers = await github.graphql(query, parameters);
                  if (teamMembers.organization.team === null) {
                    core.warning(`Could not retrieve team members for ${TeamName}`);
                    return;
                  }
                  core.notice(JSON.stringify(teamMembers));

                  for(const assignee of assignees) {
                    if (teamMembers.organization.team.members.nodes.indexOf(member => member.login === assignee.login)) {
                      core.notice(`Issue ${number} already assigned to api-review-team member ${assignee.login}.`);
                      return;
                    }
                  }

                  const randomAssignee = teamMembers.organization.team.members.nodes[Math.floor(Math.random() * teamMembers.organization.team.members.nodes.length)];

                  core.notice(`Assigning issue ${number} to api-review-team member ${randomAssignee.login}...`);

                  await github.rest.issues.addAssignees({
                    owner,
                    repo,
                    issue_number: number,
                    assignees: [randomAssignee.login],
                  });

                  core.notice(`-- Finished --`);